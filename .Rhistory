knitr::opts_chunk$set(
echo = FALSE,
cache = FALSE,
warning = FALSE,
message = FALSE,
comment = '',
out.width = "1\\linewidth")
library(dplyr) # A Grammar of Data Manipulation
library(fitdistrplus) # Help to Fit of a Parametric Distribution to Non-Censored or Censored Data
library(geomtextpath) # Curved Text in 'ggplot2'
library(ggforce) # Accelerating 'ggplot2'
library(ggplot2) # Create Elegant Data Visualisations Using the Grammar of Graphics
library(ggpmisc) # Miscellaneous Extensions to 'ggplot2'
install.packages("rlang")
library(ggpmisc) # Miscellaneous Extensions to 'ggplot2'
install.packages("rlang")
library(ggpmisc) # Miscellaneous Extensions to 'ggplot2'
remove.packages("rlang")
install.packages("rlang")
library(ggpmisc) # Miscellaneous Extensions to 'ggplot2'
library(ggrepel) # Automatically Position Non-Overlapping Text Labels with 'ggplot2'
library(ggspatial) # Spatial Data Framework for ggplot2
library(gridExtra) # Miscellaneous Functions for "Grid" Graphics
library(huxtable) # Easily Create and Style Tables for LaTeX, HTML and Other Formats
library(kableExtra) # Construct Complex Table with 'kable' and Pipe Syntax
library(patchwork) # The Composer of Plots
library(RColorBrewer) # ColorBrewer Palettes
library(sf) # Simple Features for R
library(scales) # Scale Functions for Visualization
library(shadowtext) # Shadow Text Grob and Layer
library(skimr) # Compact and Flexible Summaries of Data
library(spdep) # Spatial Dependence: Weighting Schemes, Statistics
library(tidyr) # Tidy Messy Data
library(tmap) # Thematic Maps
library(tmap) # Thematic Maps
library(TTS2016R) # An augmented 2016 Transportation Tomorrow Survey (TTS) data package
#defining the spatial availability function
sp_avail <- function(x, o_id, d_id, pop, opp, r, f, alpha = 1){
o_id <- rlang::enquo(o_id)
d_id <- rlang::enquo(d_id)
pop <- rlang::enquo(pop)
opp <- rlang::enquo(opp)
r <- rlang::enquo(r)
f <- rlang::enquo(f)
# Sum of population in system
sum_pop <- x %>%
dplyr::distinct(!!o_id,
.keep_all = TRUE) %>%
dplyr::mutate(sum_pop = !!r*(!!pop)^alpha) %>%
dplyr::pull(sum_pop) %>%
sum()
# Balancing factor size
f_p <- dplyr::pull(x, !!r) * dplyr::pull(x, !!pop)^alpha / sum_pop
# Sum of impedance
sum_impedance <- x %>%
dplyr::group_by(!!d_id) %>%
dplyr::summarize(sum_impedance = sum(!!f))
# Join sum of impedance to table
x <- x %>%
dplyr::left_join(sum_impedance,
by = rlang::as_name(d_id))
# Balancing factor impedance
f_c <- dplyr::pull(x, !!f) / x$sum_impedance
# Add balancing factors to table
x$f_c <- f_c
x$f_p <- f_p
# Sum of balancing factors for mass and impedance
sum_pa <- x %>%
dplyr::group_by(!!d_id) %>%
dplyr::summarize(sum_pa= sum(f_p * f_c))
x <- x %>%
dplyr::left_join(sum_pa,
by = rlang::as_name(d_id))
# Joint balancing factor
f_t <- (f_p * f_c) / dplyr::pull(x, sum_pa)
dplyr::pull(x, !!opp) * f_t
}
#detailed
sp_avail_detailed <- function(x, o_id, d_id, pop, opp, r, f, alpha = 1){
o_id <- rlang::enquo(o_id)
d_id <- rlang::enquo(d_id)
pop <- rlang::enquo(pop)
opp <- rlang::enquo(opp)
r <- rlang::enquo(r)
f <- rlang::enquo(f)
sum_pop <- x %>%
dplyr::distinct(!!o_id,
.keep_all = TRUE) %>%
dplyr::mutate(sum_pop = !!r*(!!pop)^alpha) %>%
dplyr::pull(sum_pop) %>%
sum()
f_p <- dplyr::pull(x, !!r) * dplyr::pull(x, !!pop)^alpha / sum_pop
sum_impedance <- x %>%
dplyr::group_by(!!d_id) %>%
dplyr::summarize(sum_impedance = sum(!!f))
x <- x %>%
dplyr::left_join(sum_impedance,
by = rlang::as_name(d_id))
f_c <- dplyr::pull(x, !!f) / x$sum_impedance
x$f_c <- f_c
x$f_p <- f_p
sum_pa <- x %>%
dplyr::group_by(!!d_id) %>%
dplyr::summarize(sum_pa= sum(f_p * f_c))
x <- x %>%
dplyr::left_join(sum_pa,
by = rlang::as_name(d_id))
x$f_t <- (f_p * f_c) / dplyr::pull(x, sum_pa)
x %>%
dplyr::mutate(V_ij = !!opp * f_t)
}
library(dplyr) # A Grammar of Data Manipulation
library(fitdistrplus) # Help to Fit of a Parametric Distribution to Non-Censored or Censored Data
# library(geomtextpath) # Curved Text in 'ggplot2'
# library(ggforce) # Accelerating 'ggplot2'
library(ggplot2) # Create Elegant Data Visualisations Using the Grammar of Graphics
library(geomtextpath) # Curved Text in 'ggplot2'
library(ggforce) # Accelerating 'ggplot2'
library(ggpmisc) # Miscellaneous Extensions to 'ggplot2'
library(ggrepel) # Automatically Position Non-Overlapping Text Labels with 'ggplot2'
library(ggspatial) # Spatial Data Framework for ggplot2
library(gridExtra) # Miscellaneous Functions for "Grid" Graphics
od_tt <- data.frame(i = c("A", "A", "A", "B", "B", "B", "C", "C", "C"), # Three origins
j = c("1", "2", "3", "1", "2", "3", "1", "2", "3"), # Three destinations
tt = c(15, 30, 100, 30, 15, 100, 100, 100, 15), # Travel time
pop = c(50000, 50000, 50000, 150000, 150000, 150000, 10000, 10000, 10000), # Population
opp = c(100000, 100000, 10000, 100000, 100000, 10000, 100000, 100000, 10000)) # Jobs
od <- data.frame(id = c("A", "B", "C", "1", "2", "3"),
type = c("Population", "Population", "Population", "Jobs", "Jobs", "Jobs"),
size = c(50000, 150000, 10000, 100000, 100000, 10000),
x = c(2.5, 2.5, 6.5, 0.5, 0.5, 6.5),
y = c(7.5, 2.5, 4.5, 7.5, 2.5, 2.5))
centers <- data.frame(id = c("Urban center", "Suburb", "Satellite town"),
radius = rep(1.3, 3),
x = c(1.5, 1.5, 6.5),
y = c(2.5, 7.5, 3.5))
# od_lines coded as segments
od_lines <- data.frame(x = c(2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 6.5, 6.5, 6.5),
y = c(7.5, 7.5, 7.5, 2.5, 2.5, 2.5, 4.5, 4.5, 4.5),
xend = c(0.5, 0.5, 6.5, 0.5, 0.5, 6.5, 0.5, 0.5, 6.5),
yend = c(7.5, 2.5, 2.5, 7.5, 2.5, 2.5, 7.5, 2.5, 2.5),
group = c("A", "A", "A", "B", "B", "B", "C", "C", "C"),
time = c("15 min", "30 min", "100 min",
"30 min", "15 min", "100 min",
"100 min", "100 min", "15 min"),
curvature = c(0.5, 0.5, -0.2, 0.5, 0.5, 0.5, 0.5, 0.5, -0.1))
od_table <- data.frame(Center = c("A", "B", "C", "1", "2", "3"),
Size = c("50,000 pop", "150,000 pop", "10,000 pop", "100,000 jobs", "100,000 jobs", "10,000 jobs"))
od_table2 <- data.frame(Path = c("A to 1", "A to 2", "A to 3",
"B to 1", "B to 2", "B to 3",
"C to 1", "C to 2", "C to 3"),
Value = c("15 mins", "30 mins", "100 mins", "30 mins", "15 mins", "100 mins", "100 mins", "100 mins", "15 mins"))
b<-0.6
com_impeds <- data.frame(tt = seq(0, 110, 1)) %>%
mutate(f1 = exp(-0.1 * tt),
f2 = exp(-b * tt)) %>%
pivot_longer(cols = -tt,
names_to = "Function",
values_to = "f") %>%
mutate(Function = case_when(Function == "f1" ~ "beta = 0.1",
Function == "f2" ~ "beta = 0.6")) %>%
ggplot() +
xlab("TT") +
ylab("f(TT)") +
geom_line(aes(x = tt,
y = f,
color = Function)) +
theme_minimal()
com_impeds
renv::init()
log(1)
log(0)
log(0.1)
log(1000)
log(10000000000000000000000)
log(100000000000000000000000000000000000000000000)
log(10^100000000000)
